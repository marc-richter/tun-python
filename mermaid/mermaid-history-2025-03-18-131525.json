[{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n        C[\"OS Kernel (A)\"]:::kernel\n        D[\"OS Kernel (B)\"]:::kernel\n        E[\"Terminal Container A\"]:::term\n\n        E -->|\"1 ping 192.0.2.3 -I tun0\"| C\n        C -->|\"2 ICMP Request in TUN schreiben (User→Kernel)\"| C\n        A <-->|\"3 Paket von TUN lesen (Kernel→User)\"| C\n        \n        A -->|\"4 AMQP Publish → network_request\"| RMQ\n        RMQ -->|\"5 Message Delivery an Consumer\"| B\n        B -->|\"6 Paket in TUN schreiben (User→Kernel)\"| D\n        D -->|\"7 ICMP Reply generieren (Kernel→TUN)\"| D\n        B <-->|\"8 Antwort vom TUN lesen (Kernel→User)\"| D\n        B -->|\"9 AMQP Publish → network_reply\"| RMQ\n        RMQ -->|\"10 Message Delivery an Consumer\"| A\n        A -->|\"11 Antwort in TUN schreiben (User→Kernel)\"| C\n        C -->|\"12 ICMP Reply an Terminal\"| E\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n    classDef kernel fill:#f0f4c3,stroke:#827717;\n    classDef term fill:#d7ccc8,color:#000000,stroke:#5d4037;\n\n    class A,B tun\n    class C,D kernel\n    class E term\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742301085770,"type":"auto","id":"22685c53-7ad8-447e-9eb6-99a93dbe9d56","name":"fat-table"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n        C[\"OS Kernel (A)\"]:::kernel\n        D[\"OS Kernel (B)\"]:::kernel\n        E[\"Terminal Container A\"]:::term\n\n        E -->|\"1 ping 192.0.2.3 -I tun0\"| C\n        C -->|\"2 ICMP Request in TUN schreiben (User→Kernel)\"| C\n        A <-->|\"3 Paket von TUN lesen (Kernel→User)\"| C\n        \n        A -->|\"4 AMQP Publish → network_request\"| RMQ\n        RMQ -->|\"5 Message Delivery an Consumer\"| B\n        B -->|\"6 Paket in TUN schreiben (User→Kernel)\"| D\n        D -->|\"7 ICMP Reply generieren (Kernel→TUN)\"| D\n        B <-->|\"8 Antwort vom TUN lesen (Kernel→User)\"| D\n        B -->|\"9 AMQP Publish → network_reply\"| RMQ\n        RMQ -->|\"10 Message Delivery an Consumer\"| A\n        A -->|\"11 Antwort in TUN schreiben (User→Kernel)\"| C\n        C -->|\"12 ICMP Reply an Terminal\"| E\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n    classDef kernel fill:#f0f4c3,stroke:#827717;\n    classDef term fill:#d7ccc8,stroke:#f;\n\n    class A,B tun\n    class C,D kernel\n    class E term\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742301026186,"type":"auto","id":"249cdc81-5767-463a-904c-50a44e98e3b3","name":"cool-church"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n        C[\"OS Kernel (A)\"]:::kernel\n        D[\"OS Kernel (B)\"]:::kernel\n        E[\"Terminal Container A\"]:::term\n\n        E -->|\"1 ping 192.0.2.3 -I tun0\"| C\n        C -->|\"2 ICMP Request in TUN schreiben (User→Kernel)\"| C\n        A <-->|\"3 Paket von TUN lesen (Kernel→User)\"| C\n        \n        A -->|\"4 AMQP Publish → network_request\"| RMQ\n        RMQ -->|\"5 Message Delivery an Consumer\"| B\n        B -->|\"6 Paket in TUN schreiben (User→Kernel)\"| D\n        D -->|\"7 ICMP Reply generieren (Kernel→TUN)\"| D\n        B <-->|\"8 Antwort vom TUN lesen (Kernel→User)\"| D\n        B -->|\"9 AMQP Publish → network_reply\"| RMQ\n        RMQ -->|\"10 Message Delivery an Consumer\"| A\n        A -->|\"11 Antwort in TUN schreiben (User→Kernel)\"| C\n        C -->|\"12 ICMP Reply an Terminal\"| E\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n    classDef kernel fill:#f0f4c3,stroke:#827717;\n    classDef term fill:#d7ccc8,stroke:#4e342e;\n\n    class A,B tun\n    class C,D kernel\n    class E term\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300845769,"type":"auto","id":"2e1d0c97-5b6b-4a08-ac93-0b8a0b90490e","name":"damaged-parrot"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n        C[\"OS Kernel\"]:::tun\n        D[\"OS Kernel\"]:::tun\n        E[\"Terminal Container A\"]:::tun\n\n        E -->|\"1 ping 192.0.2.3\"| C\n        C -->|\"2 ICMP in TUN schreiben\"| C\n        A -->|\"3 ICMP in TUN lesen\"| C\n\n\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300725769,"type":"auto","id":"a7a8e511-432a-475b-bcb4-29b25f713d31","name":"stocky-accountant"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n        C[\"OS Kernel\"]:::tun\n        D[\"OS Kernel\"]:::tun\n        E[\"Terminal Container A\"]:::tun\n\n        E -->|\"ping 192.0.2.3\"| C\n        C -->|\"ICMP in TUN schreiben\"| C\n        A -->|\"ICMP in TUN lesen\"| C\n\n\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300665768,"type":"auto","id":"e5e58dce-27ce-4f08-ac31-9a7523dccbf7","name":"nice-gas"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n        C[\"OS Kernel\"]:::tun\n        D[\"OS Kernel\"]:::tun\n        E[\"Terminal Container A\"]:::tun\n\n        E -->|\"ping 192.0.2.3\"| C\n        C -->|\"ICMP in TUN schreiben\"| C\n        \n\n\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300605768,"type":"auto","id":"8bf32ef8-dfdf-44b8-ab54-611b4b7ae420","name":"brown-area"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n        C[\"OS Kernel\"]:::tun\n        D[\"OS Kernel\"]:::tun\n        E[\"Terminal Container A\"]:::tun\n\n        E -->|\"ping 192.0.2.3\"| A\n        A -->|\"ICMP in TUN lesen\"| C\n        C -->|\"ICMP weiterleiten\"| A\n        \n        \n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300545769,"type":"auto","id":"f75837b7-0656-4b83-adbb-e6f950ffb407","name":"tasteless-teenager"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        dummy[\" \"]:::empty\n        RMQ[\"RabbitMQ\\n172.18.0.2\"]:::rmq\n        A[\"Container A\\n172.18.0.3\\nTUN:192.0.2.2\"]:::tun\n        B[\"Container B\\n172.18.0.4\\nTUN:192.0.2.3\"]:::tun\n\n        %% ICMP Lese- und Schreibprozesse links und rechts vom OS\n        A_read[\"ICMP in TUN lesen\"]:::process\n        A_write[\"ICMP in TUN schreiben\"]:::process\n        B_read[\"ICMP in TUN lesen\"]:::process\n        B_write[\"ICMP in TUN schreiben\"]:::process\n\n        %% Verbindungen zu ICMP-Prozessen\n        A_read --> A\n        A --> A_write\n        B_read --> B\n        B --> B_write\n\n        %% Kommunikation über RabbitMQ\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n    classDef process fill:#cce5ff,stroke:#1e88e5;\n    classDef empty fill:transparent,stroke:transparent;\n\n    class A tun\n    class B tun\n    class A_read process\n    class A_write process\n    class B_read process\n    class B_write process\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300305773,"type":"auto","id":"c33e040e-4a14-47ad-9374-a18e041e05f9","name":"loud-helicopter"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n\n        A -->|\"ICMP in TUN lesen\"| A\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300125772,"type":"auto","id":"249b97c0-2d5e-42ad-bb9f-d054dea8bd57","name":"uneven-sugar"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n    dummy[\" \"]:::empty\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n\n        A -->|\"ICMP in TUN lesen\"| A\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742300065772,"type":"auto","id":"0664247e-d5b3-4d29-a55f-48e40e712478","name":"early-appointment"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ 172.18.0.2\"]:::rmq\n        A[\"Container A 172.18.0.3 TUN:192.0.2.2\"]:::tun\n        B[\"Container B 172.18.0.4 TUN:192.0.2.3\"]:::tun\n\n        A -->|\"ICMP in TUN lesen\"| A\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742299945776,"type":"auto","id":"d332efcd-9e78-4b7a-9081-8aceb8a470d9","name":"great-mother"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ\\n172.18.0.2\"]:::rmq\n        A[\"Container A\\n172.18.0.3\\nTUN:192.0.2.2\"]:::tun\n        B[\"Container B\\n172.18.0.4\\nTUN:192.0.2.3\"]:::tun\n\n        A -->|\"ICMP in TUN lesen\"| A\n        A -->|\"network_request Queue\"| RMQ\n        RMQ -->|\"Nachricht weiterleiten\"| B\n        B -->|\"ICMP in TUN schreiben\"| B\n        B -->|\"Antwort via network_reply\"| RMQ\n        RMQ -->|\"Antwort an Container A\"| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742299885772,"type":"auto","id":"bd27cb11-d910-439f-88a6-0de855724cde","name":"uninterested-girl"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[\"RabbitMQ\\n172.18.0.2\"]:::rmq\n        A[\"Container A\\n172.18.0.3\\nTUN:192.0.2.2\"]:::tun\n        B[\"Container B\\n172.18.0.4\\nTUN:192.0.2.3\"]:::tun\n\n        A -->|1. ICMP in TUN lesen| A\n        A -->|2. network_request Queue| RMQ\n        RMQ -->|3. Nachricht weiterleiten| B\n        B -->|4. ICMP in TUN schreiben| B\n        B -->|5. Antwort via network_reply| RMQ\n        RMQ -->|6. Antwort an Container A| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742299826178,"type":"auto","id":"e7ee9d5f-e1a8-490a-9eff-b5c21dae6fe9","name":"handsome-yacht"},{"state":{"code":"graph TD\n    subgraph \"Docker Network 172.18.0.0/16\"\n        RMQ[[RabbitMQ<br/>172.18.0.2]]:::rmq\n        A[Container A<br/>172.18.0.3<br/>TUN:192.0.2.2]:::tun\n        B[Container B<br/>172.18.0.4<br/>TUN:192.0.2.3]:::tun\n\n        A -->|1. ICMP in TUN lesen| A\n        A -->|2. network_request Queue| RMQ\n        RMQ -->|3. Nachricht weiterleiten| B\n        B -->|4. ICMP in TUN schreiben| B\n        B -->|5. Antwort via network_reply| RMQ\n        RMQ -->|6. Antwort an Container A| A\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef tun fill:#e1f5fe,stroke:#039be5;\n\n    class A tun\n    class B tun\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742299766181,"type":"auto","id":"515ee6c1-c307-4ed2-a18e-83c5805f2d46","name":"billowy-midnight"},{"state":{"code":"graph TD\n    subgraph Docker Network 172.18.0.0/16\n        RMQ[[RabbitMQ<br/>172.18.0.2<br/>5672/AMQP <br/>15672/Management]]:::rmq\n        RMQ -->|AMQP 0-9-1 REQUEST_QUEUE| A[Container A<br/>172.18.0.3<br/>TUN:192.0.2.2/24]:::container\n        RMQ -->|AMQP 0-9-1 REQUEST_QUEUE| B[Container B<br/>172.18.0.4<br/>TUN:192.0.2.3/24]:::container\n        \n        A -->|TUN Traffic<br/>ICMP/TCP<br/>MTU 1400| VPN[TUN VPN Network<br/>192.0.2.0/24<br/>Routing via iptables MASQUERADE]:::vpn\n        B -->|TUN Traffic<br/>ICMP Replies<br/>TCP ACK| VPN\n    end\n    \n    subgraph Host Machine\n        Host[Host Access<br/>5672 → 172.18.0.2<br/>15672 → 172.18.0.2<br/>sysctl: ip_forward=1]\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef container fill:#e1f5fe,stroke:#039be5;\n    classDef vpn fill:#cce5ff,stroke:#1e88e5;\n    \n    class A container\n    class B container\n    class VPN vpn\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742299645772,"type":"auto","id":"480a585e-78b7-4a12-a540-45afcf63d4ac","name":"refined-pilot"},{"state":{"code":"graph TD\n    subgraph Docker Network 172.18.0.0/16\n        RMQ[[RabbitMQ\n        172.18.0.2\n        5672/AMQP | 15672/Management]]:::rmq\n        RMQ -->|AMQP 0-9-1\n        REQUEST_QUEUE\n        REPLY_QUEUE| A[Container A\n        172.18.0.3\n        TUN:192.0.2.2/24]\n        RMQ -->|AMQP 0-9-1\n        REQUEST_QUEUE\n        REPLY_QUEUE| B[Container B\n        172.18.0.4\n        TUN:192.0.2.3/24]\n        \n        A -->|TUN Traffic\n        ICMP/TCP\n        MTU 1400| VPN[TUN VPN Network\n        192.0.2.0/24\n        Routing via iptables MASQUERADE]\n        B -->|TUN Traffic\n        ICMP Replies\n        TCP ACK| VPN\n    end\n    \n    subgraph Host Machine\n        Host[Host Access\n        5672 → 172.18.0.2\n        15672 → 172.18.0.2\n        sysctl: ip_forward=1]\n    end\n\n    classDef rmq fill:#ff9900,color:white,stroke-width:2px;\n    classDef container fill:#e1f5fe,stroke:#039be5;\n    classDef vpn fill:#cce5ff,stroke:#1e88e5;\n    \n    style A container\n    style B container\n    style VPN vpn\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742299586178,"type":"auto","id":"0b6fc3f3-68bf-4cef-91d0-e5039540b40a","name":"important-china"},{"state":{"code":"graph TD\n    subgraph Docker Network 172.18.0.0/16\n        RMQ[[RabbitMQ:5672/15672]]:::rmq -->|AMQP| A[Container A]\n        RMQ -->|AMQP| B[Container B]\n        \n        A -->|TUN 192.0.2.2/24| VPN[TUN Network]\n        B -->|TUN 192.0.2.3/24| VPN\n        \n        classDef rmq fill:#ff9900,color:white;\n    end\n    \n    subgraph Host Machine\n        Host[Host:5672/15672] --> RMQ\n    end\n\n    style VPN fill:#cce5ff,stroke:#333\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1742299526177,"type":"auto","id":"ed226373-27d2-4f38-946d-3e46917af917","name":"brief-greece"},{"state":{"code":"flowchart LR\n    classDef app fill:#4CAF50,stroke:#388E3C\n    classDef network fill:#2196F3,stroke:#1976D2\n    classDef config fill:#9C27B0,stroke:#7B1FA2\n    classDef firewall fill:#FF5722,stroke:#E64A19\n    classDef storage fill:#607D8B,stroke:#455A64\n\n    subgraph sender[\"Sender\"]\n        app1[\"Python Script\"]:::app\n        tun0[\"TUN Device 192.0.2.1\"]:::network\n        routing[\"Routing Rules\"]:::config\n        iptables[\"IPTables NAT\"]:::firewall\n    end\n\n    subgraph empfaenger[\"Empfänger\"]\n        app2[\"TUN Reader\"]:::app\n        tun0_2[\"TUN Device 192.0.2.2\"]:::network\n        reassembler[\"Image Reassembler\"]:::storage\n    end\n\n    app1 --> |Raw IP Packets| tun0\n    tun0 --> |Via Virtual Network| tun0_2\n    tun0_2 --> |Datenstrom| app2\n    app2 --> |Bildfragmente| reassembler\n    routing --> |\"192.0.2.0/24 dev tun0\"| tun0\n    iptables --> |\"MASQUERADE 192.0.2.0/24\"| tun0\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1741871072336,"type":"auto","id":"4ce4cfe0-9bf1-46d0-bb8f-720252320e9e","name":"attractive-lifeguard"},{"state":{"code":"flowchart LR\n    classDef app fill:#4CAF50,stroke:#388E3C\n    classDef network fill:#2196F3,stroke:#1976D2\n    classDef config fill:#9C27B0,stroke:#7B1FA2\n    classDef firewall fill:#FF5722,stroke:#E64A19\n    classDef storage fill:#607D8B,stroke:#455A64\n\n    subgraph sender[\"Sender Container\"]\n        app1[\"Python Script\"]:::app\n        tun0[\"TUN Device 192.0.2.1\"]:::network\n        routing[\"Routing Rules\"]:::config\n        iptables[\"IPTables NAT\"]:::firewall\n    end\n\n    subgraph empfaenger[\"Empfänger Container\"]\n        app2[\"TUN Reader\"]:::app\n        tun0_2[\"TUN Device 192.0.2.2\"]:::network\n        reassembler[\"Image Reassembler\"]:::storage\n    end\n\n    app1 --> |Raw IP Packets| tun0\n    tun0 --> |Via Virtual Network| tun0_2\n    tun0_2 --> |Datenstrom| app2\n    app2 --> |Bildfragmente| reassembler\n    routing --> |\"192.0.2.0/24 dev tun0\"| tun0\n    iptables --> |\"MASQUERADE 192.0.2.0/24\"| tun0\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1741859393864,"type":"auto","id":"f8b54264-8187-42cb-b296-bf2a4277caaf","name":"hot-cartoon"},{"state":{"code":"architecture-beta\n\ngroup sender[Sender Container]\n  service app1(Python Script):::app\n  service tun0[TUN Device 192.0.2.1]:::network\n  service routing[Routing Rules]:::config\n  service iptables[IPTables NAT]:::firewall\n\ngroup empfaenger[Empfänger Container]\n  service app2(TUN Reader):::app\n  service tun0_2[TUN Device 192.0.2.2]:::network\n  service reassembler[Image Reassembler]:::storage\n\nflowchart LR\n  app1 -->|Raw IP Packets| tun0\n  tun0 -->|Via Virtual Network| tun0_2\n  tun0_2 -->|Datenstrom| app2\n  app2 -->|Bildfragmente| reassembler\n  routing -->|192.0.2.0/24 dev tun0| tun0\n  iptables -->|MASQUERADE 192.0.2.0/24| tun0\n\nclassDef app fill:#4CAF50,stroke:#388E3C\nclassDef network fill:#2196F3,stroke:#1976D2\nclassDef config fill:#9C27B0,stroke:#7B1FA2\nclassDef firewall fill:#FF5722,stroke:#E64A19\nclassDef storage fill:#607D8B,stroke:#455A64\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1741859273865,"type":"auto","id":"e2f4e704-2370-495d-b706-36ba7e402718","name":"unimportant-russia"},{"state":{"code":"graph LR\n    subgraph Hostsystem[\"Hostsystem (192.0.2.2)\"]\n        TUN0[\"tun0<br/>IP: 192.0.2.2/24<br/>MTU: 1500\"]\n        Sender[\"sender.py<br/>Sendet ICMP + Bilddaten<br/>Protokoll 253\"]\n        Reader[\"tun_reader.py<br/>Reassembliert Bilder<br/>Verarbeitet ICMP\"]\n        TCPDUMP[\"tcpdump<br/>Captured ICMP-Verkehr\"]\n        Ziel[\"192.0.2.1<br/><< Virtuelles Ziel >>\"]\n    end\n\n    Sender -->|RAW IP-Pakete| TUN0\n    TUN0 -->|Rohdatenstrom| Reader\n    TUN0 -->|Spiegelverkehr| TCPDUMP\n    TUN0 -->|ICMP/Bilddaten| Ziel\n    Ziel -->|ICMP Replies| TUN0\n\n    style Ziel fill:#f9f,stroke:#333,stroke-width:2px\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"rough":false,"updateDiagram":false,"panZoom":false},"time":1741858613865,"type":"auto","id":"362a524a-f600-42c5-ad52-639fe25c0448","name":"acoustic-article"}]